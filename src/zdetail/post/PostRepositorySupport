// Spring Boot 프레임워크에서 QueryDSL 라이브러리를 이용하여
//데이터베이스에서 게시물(Post)을 조회하는 기능을 구현한 코드.

import com.querydsl.jpa.impl.JPAQueryFactory;
import jakarta.persistence.EntityManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Repository;

import java.util.List;

import static com.ksh.myapp.post.QPost.post;

@Repository
public class PostRepositorySupport {
// 게시물(Post)의 정보를 쿼리하는 역할
    private JPAQueryFactory query;

    @Autowired
    public PostRepositorySupport(EntityManager em) {
        this.query = new JPAQueryFactory(em);
    }

//게시글의 키워드를 기준으로 페이징 처리를 수행하는 searchPaging 메서드를 구현
// keyword는 검색할 키워드를 의미하며,
 //pageReq는 페이징에 필요한 정보(페이지 번호 및 페이지당 항목 수)를 담고 있는 객체
    public Page<Post> searchPaging(String keyword, PageRequest pageReq) {
        // SELECT
        List<Post> content = query.
                selectFrom(post)
                .where(post.title.contains(keyword)
                // 필터링
                .or(post.content.contains(keyword))
                .orderBy(post.no.desc())
                .limit(pageReq.getPageSize()).offset(pageReq.getOffset())
                .fetch();
        // COUNT
        Long total = query.select(post.count()).from(post)
                .where(post.title.contains(keyword)
                .or(post.content.contains(keyword))).fetchFirst();

        Page<Post> p = new PageImpl<>(content, pageReq, total);
        return p;
    }
}
